import nl.woodmanict.koos.parsers.KoosTeamParser;
import nl.woodmanict.koos.parsers.KoosScheduleParser;
import nl.woodmanict.koos.model.Team;
import nl.woodmanict.koos.dao.TeamDao;
import nl.woodmanict.koos.dao.TeamDaoImpl;
import nl.woodmanict.koos.model.Match;
import nl.woodmanict.koos.dao.MatchDao;
import nl.woodmanict.koos.dao.MatchDaoImpl;

import java.util.List;
import java.util.stream.Collectors;

import java.io.File;
import java.nio.file.Files;
import java.nio.charset.Charset;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.WRITE;
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
  private static TeamDao teamDao = TeamDaoImpl.getInstance();
    private static MatchDao matchDao = MatchDaoImpl.getInstance();
    private static DateTimeFormatter dayFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private static DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a");

  private static void printTeams() {
    System.out.println("Teams:");

    teamDao.getTeams().stream().forEach(System.out::println);
  }

  private static String formatDate(LocalDateTime dateTime) {
    return dateTime.format(dayFormatter);
  }

  private static String formatTime(LocalDateTime dateTime) {
    return dateTime.format(timeFormatter);
  }

    public static void main(String[] args) {

        try {
          final String path = App.class.getResource("KoosCompetitie2017.xlsx").getPath();
          KoosTeamParser teamParser = new KoosTeamParser(path);

          teamParser.parseTeams(teamDao::addTeam);

          printTeams();

          KoosScheduleParser koosScheduleParser = new KoosScheduleParser(path);
          koosScheduleParser.parseSchedule(matchDao::addMatch);

          final Team teamDrive = teamDao.findTeam("Drive").get();

          List<String> csvRows = matchDao.getMatches().stream().filter(match -> teamDrive.equals(match.getHomeTeam()) || teamDrive.equals(match.getAwayTeam())).
          map(match -> {
            Team homeTeam = match.getHomeTeam();
            Team awayTeam = match.getAwayTeam();

            StringBuilder row = new StringBuilder("Koos competitie tegen ");
            row.append((teamDrive.equals(homeTeam) ? awayTeam : homeTeam).getName());

            if (homeTeam.isPlayingDoubles() && awayTeam.isPlayingDoubles()) {
              row.append(" + dubbel");
            }
            row.append(",");

            LocalDateTime matchTime = match.getDateTime();

            row.append(formatDate(matchTime));
            row.append(",");
            row.append(formatTime(matchTime));
            row.append(",");

            LocalDateTime endTime = matchTime.plusHours(2);

            row.append(formatDate(endTime));
            row.append(",");
            row.append(formatTime(endTime));
            row.append(",");

            row.append("\"All Inn Squash, Vlampijpstraat 79, 3534 AR Utrecht, Netherlands\"");

            return row.toString();
          }).collect(Collectors.toList());

          final String header = "Subject,Start Date,Start Time,End Date,End Time,Location";
          csvRows.add(0, header);

          csvRows.stream().forEach(System.out::println);
          File schedule = new File("schedule.csv");

          Files.write(schedule.toPath(), csvRows, Charset.forName("UTF-8"), CREATE, WRITE, TRUNCATE_EXISTING);
      } catch (Exception e) {
        System.err.println(e.getMessage());
        e.printStackTrace();
      }
    }
}
